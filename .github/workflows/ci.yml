name: Django Tests

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    name: Run test suite
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: MetaGap

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt coverage

      - name: Run Django tests with coverage
        id: tests
        continue-on-error: true
        run: |
          set -o pipefail
          python -m coverage run manage.py test 2>&1 | tee test-output.log

      - name: Generate coverage reports and enforce thresholds
        if: always()
        run: |
          if [ ! -f .coverage ]; then
            echo "No coverage data generated" | tee coverage-summary.txt
            exit 1
          fi

          coverage report --data-file=.coverage --skip-empty | tee coverage-summary.txt

          # Enforce the MetagapUserCode threshold only when relevant files were executed.
          # If coverage reports "No data to report." we treat it as a signal that no
          # MetagapUserCode modules were collected during the run and skip the threshold,
          # while normal runs that exercise those modules will still fail if coverage dips
          # below the configured minimum.
          metagap_output=$(coverage report --data-file=.coverage --include="*/MetagapUserCode/*" --fail-under=75 2>&1)
          metagap_status=$?
          echo "$metagap_output"
          if echo "$metagap_output" | grep -q "No data to report."; then
            echo "Skipping MetagapUserCode threshold enforcement because no relevant coverage data was found."
          elif [ $metagap_status -ne 0 ]; then
            exit $metagap_status
          fi

          coverage report --data-file=.coverage --include="*/app/*" --fail-under=80
          coverage xml --data-file=.coverage -o coverage.xml

      - name: Annotate metadata warnings
        if: always()
        run: |
          if [ -f test-output.log ]; then
            while IFS= read -r line; do
              message="${line#*:}"
              if [ -z "$message" ]; then
                message="$line"
              fi
              echo "::warning::${message}" 
            done < <(grep -n "Unhandled metadata key" test-output.log || true)
          fi

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: django-test-artifacts
          path: |
            MetaGap/test-output.log
            MetaGap/coverage-summary.txt
            MetaGap/coverage.xml
          if-no-files-found: warn

      - name: Fail if tests failed
        if: steps.tests.outcome == 'failure'
        run: exit 1
