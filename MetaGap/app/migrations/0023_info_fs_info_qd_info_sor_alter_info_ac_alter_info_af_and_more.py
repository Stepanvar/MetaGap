# Generated by Django 5.1.1 on 2025-10-09 10:09

from decimal import Decimal, InvalidOperation

from django.db import migrations, models


def _sanitize_string_for_numeric(value, *, allow_float: bool) -> str | None:
    if value is None:
        return None

    candidate = value
    if isinstance(candidate, str):
        candidate = candidate.strip()
        if not candidate:
            return None
    if isinstance(candidate, (list, tuple)):
        if not candidate:
            return None
        return _sanitize_string_for_numeric(candidate[0], allow_float=allow_float)

    if isinstance(candidate, str) and "," in candidate:
        candidate = candidate.split(",", 1)[0].strip()

    if isinstance(candidate, str):
        normalized = candidate
    else:
        normalized = str(candidate)

    try:
        if allow_float:
            float(normalized)
        else:
            decimal_value = Decimal(normalized)
            if decimal_value != decimal_value.to_integral_value():
                return None
    except (InvalidOperation, TypeError, ValueError):
        return None

    if allow_float:
        return str(float(normalized))

    decimal_value = Decimal(normalized)
    return str(int(decimal_value))


def _coerce_numeric_value(value, *, allow_float: bool):
    if value in (None, ""):
        return None

    if allow_float:
        try:
            return float(value)
        except (TypeError, ValueError):
            return None

    try:
        return int(value)
    except (TypeError, ValueError):
        try:
            decimal_value = Decimal(str(value))
        except (InvalidOperation, TypeError, ValueError):
            return None
        if decimal_value != decimal_value.to_integral_value():
            return None
        return int(decimal_value)


def sanitize_info_numeric_fields(apps, schema_editor):
    Info = apps.get_model("app", "Info")
    db_alias = schema_editor.connection.alias

    for info in Info.objects.using(db_alias).all():
        updates: dict[str, str | None] = {}
        for field, allow_float in (
            ("ac", False),
            ("an", False),
            ("dp", False),
            ("af", True),
            ("mq", True),
        ):
            sanitized = _sanitize_string_for_numeric(
                getattr(info, field), allow_float=allow_float
            )
            updates[field] = sanitized
        Info.objects.using(db_alias).filter(pk=info.pk).update(**updates)


def coerce_info_numeric_fields(apps, schema_editor):
    Info = apps.get_model("app", "Info")
    db_alias = schema_editor.connection.alias

    for info in Info.objects.using(db_alias).all():
        updates: dict[str, float | int | None] = {}
        for field, allow_float in (
            ("ac", False),
            ("an", False),
            ("dp", False),
            ("af", True),
            ("mq", True),
        ):
            coerced = _coerce_numeric_value(
                getattr(info, field), allow_float=allow_float
            )
            updates[field] = coerced
        Info.objects.using(db_alias).filter(pk=info.pk).update(**updates)


class Migration(migrations.Migration):

    dependencies = [
        ("app", "0022_samplegroup_additional_metadata"),
    ]

    operations = [
        migrations.AddField(
            model_name="info",
            name="fs",
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="info",
            name="qd",
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="info",
            name="sor",
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.RunPython(
            sanitize_info_numeric_fields, migrations.RunPython.noop
        ),
        migrations.AlterField(
            model_name="info",
            name="ac",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="info",
            name="af",
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="info",
            name="an",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="info",
            name="dp",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="info",
            name="mq",
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.RunPython(
            coerce_info_numeric_fields, migrations.RunPython.noop
        ),
    ]
