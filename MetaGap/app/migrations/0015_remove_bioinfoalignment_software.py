# Generated by Django 5.1.1 on 2025-10-08 15:25

from django.core.exceptions import FieldDoesNotExist
from django.db import migrations


def copy_software_into_tool(apps, schema_editor):
    BioinfoAlignment = apps.get_model("app", "BioinfoAlignment")

    tool_field = BioinfoAlignment._meta.get_field("tool")
    max_length = getattr(tool_field, "max_length", None)

    for alignment in BioinfoAlignment.objects.all():
        software = getattr(alignment, "software", None)
        tool = alignment.tool

        if not software:
            continue

        updated = False

        if not tool:
            alignment.tool = (
                software if max_length is None else software[:max_length]
            )
            updated = True
        elif tool != software:
            combined = f"{tool} / {software}"
            if max_length is None or len(combined) <= max_length:
                alignment.tool = combined
                updated = True

        if updated:
            alignment.save(update_fields=["tool"])


def restore_tool_to_software(apps, schema_editor):
    """Populate the restored ``software`` column from the surviving tool data."""

    BioinfoAlignment = apps.get_model("app", "BioinfoAlignment")

    try:
        software_field = BioinfoAlignment._meta.get_field("software")
    except FieldDoesNotExist:
        # The ``software`` column has already been removed (for example by
        # ``0012_remove_bioinfoalignment_software_and_more`` running first),
        # so there is nothing to restore.
        return

    max_length = getattr(software_field, "max_length", None)

    for alignment in BioinfoAlignment.objects.all():
        tool = alignment.tool
        if not tool:
            continue

        software_value = tool if max_length is None else tool[:max_length]

        if alignment.software != software_value:
            alignment.software = software_value
            alignment.save(update_fields=["software"])


class Migration(migrations.Migration):

    dependencies = [
        ("app", "0014_bioinfoalignment_tool"),
    ]

    operations = [
        migrations.RunPython(copy_software_into_tool, restore_tool_to_software),
    ]
