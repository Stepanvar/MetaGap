# Generated by Django 5.1.1 on 2025-10-09 10:06

import django.db.models.deletion
from django.db import migrations, models


def _remove_orphan_allele_frequencies(apps, schema_editor):
    """Ensure no allele frequencies without a sample group remain."""

    AlleleFrequency = apps.get_model("app", "AlleleFrequency")
    AlleleFrequency.objects.filter(sample_group__isnull=True).delete()


def _deduplicate_allele_frequencies(apps, schema_editor):
    """Ensure each sample group/variant combination only has one record."""

    AlleleFrequency = apps.get_model("app", "AlleleFrequency")

    duplicates = (
        AlleleFrequency.objects.values(
            "sample_group_id", "chrom", "pos", "ref", "alt"
        )
        .annotate(min_id=models.Min("id"), count=models.Count("id"))
        .filter(count__gt=1)
    )

    for duplicate in duplicates:
        AlleleFrequency.objects.filter(
            sample_group_id=duplicate["sample_group_id"],
            chrom=duplicate["chrom"],
            pos=duplicate["pos"],
            ref=duplicate["ref"],
            alt=duplicate["alt"],
        ).exclude(id=duplicate["min_id"]).delete()


def _noop_reverse(apps, schema_editor):
    """No reverse operation; deleted records cannot be restored."""
    # Intentionally empty.
    return


class Migration(migrations.Migration):

    dependencies = [
        ("app", "0022_samplegroup_additional_metadata"),
    ]

    operations = [
        migrations.RunPython(
            _remove_orphan_allele_frequencies,
            reverse_code=_noop_reverse,
        ),
        migrations.RunPython(
            _deduplicate_allele_frequencies,
            reverse_code=_noop_reverse,
        ),
        migrations.AlterField(
            model_name="allelefrequency",
            name="sample_group",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="allele_frequencies",
                to="app.samplegroup",
            ),
        ),
        migrations.AddIndex(
            model_name="allelefrequency",
            index=models.Index(
                fields=["sample_group", "chrom", "pos"],
                name="app_allelef_sample__1c044c_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="allelefrequency",
            index=models.Index(
                fields=["variant_id"], name="app_allelef_variant_db9dc0_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="allelefrequency",
            constraint=models.UniqueConstraint(
                fields=("sample_group", "chrom", "pos", "ref", "alt"),
                name="allele_frequency_unique_variant",
            ),
        ),
    ]
